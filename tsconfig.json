{
  "compilerOptions": {
    "target": "es2020",
    "module": "esnext",
    "moduleResolution": "node",
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "outDir": "./dist",
    "rootDir": "./src",
    "declaration": true,
    "sourceMap": true,
    "lib": ["dom", "dom.iterable", "esnext"],
    "jsx": "react-jsx",
    "allowJs": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["src/**/*.ts", "src/**/*.tsx", "src/**/*.js", "src/**/*.jsx"],
  "exclude": ["node_modules", "dist"]
}
/**
 * TypeScript Configuration
 * 
 * This configuration file controls how TypeScript compiles your project.
 * 
 * To see these settings in action:
 * 1. If using VS Code, install the TypeScript extension which provides IntelliSense for tsconfig.json
 * 2. Some IDEs like WebStorm provide a visual editor for tsconfig.json
 * 3. You can run `tsc --showConfig` in your terminal to see the effective configuration
 * 4. For a visual representation of your project structure based on these settings,
 *    tools like "typescript-project-visualizer" can be used
 * 
 * The settings here affect type checking, compilation behavior, and which files
 * are included in the TypeScript compilation process.
 */
{
  "compilerOptions": {
    "target": "es2020",
    "module": "esnext",
    "moduleResolution": "node",
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "outDir": "./dist",
    "rootDir": "./src",
    "declaration": true,
    "sourceMap": true,
    "lib": ["dom", "dom.iterable", "esnext"],
    "jsx": "react-jsx",
    "allowJs": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["src/**/*.ts", "src/**/*.tsx"],
  "exclude": ["node_modules", "dist"]
}
/**
 * TypeScript Configuration
 * 
 * This configuration file controls how TypeScript compiles your project.
 * 
 * Deployment Instructions:
 * - Yes, you can zip and deploy this as a v0 GUI
 * - Run `npm run build` to create production-ready files
 * - The compiled output will be in the ./dist directory
 * - Zip the contents of the dist folder and deploy to your hosting service
 * - Make sure your hosting environment supports single-page applications if using client-side routing
 * 
 * Note: This configuration preserves all existing GUI functionality while enabling
 * proper TypeScript compilation for deployment. No working code has been removed
 * or replaced with stubs.
 */
{
  "compilerOptions": {
    "target": "es2020",
    "module": "esnext",
    "moduleResolution": "node",
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "outDir": "./dist",
    "rootDir": "./src",
    "declaration": true,
    "sourceMap": true,
    "lib": ["dom", "dom.iterable", "esnext"],
    "jsx": "react-jsx",
    "allowJs": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["src/**/*.ts", "src/**/*.tsx"],
  "exclude": ["node_modules", "dist"]
}
/**
 * TypeScript configuration for the project.
 * 
 * This file configures the TypeScript compiler options for the project, including:
 * - Target ECMAScript version
 * - Library inclusions
 * - Type checking strictness
 * - Module system settings
 * - File inclusion/exclusion patterns
 */
